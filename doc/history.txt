-25/06/22:
    *   (Armando) despues de batallar durante buen rato cambie el modo de subir
        la libreria, siguiendo la guia de la pagina de python, ya esta subida
        la version 0.0.2, debo actualizar y probar si no hay problemas con las
        cosas que agregue a "math". (4:48pm)
    *   pues parece que la regue en algun import, lo corregire y probare de
        nuevo. (4:53pm)
    *   el error de importacion ha sido arreglado (cuando importemos funciones
        del modulo dentro del modulo utilizar PYLEJANDRIA.MODULO). (5:06pm)
    *   tambien cree la carpeta historial, asi podemos dejar las cosas que
        hicimos y poder tener un recordatorio, tambien, Javier, si lees esto no 
        olvides de explicar que cosas hiciste para en dado caso regresar el
        modulo con GIT y arreglar pedos, cuando tengas GIT vemos lo de como
        utilizar la rama "Dev" para evitar cagaderos como me paso con MAFER.
    *   Ya que Demian y Javier por sus razones no podian instalar GIT decidi
        instalarlo en la laptop roja y ya entendi como contribuir al codigo,
        los pasos son: (8:08pm)

            --- primera vez ---
            crear un "fork" del proyecto en la cuenta que va a contribuir
            git clone "repositorio"

            --- en cmd ---
            git pull (para tener la ultima version)
            git branch rama     (crear rama para no afectar la rama principal)
            git checkout rama   (cambiar a la nueva rama)

            --- realizar edicion ---
            git add .               (agregar los cambios)
            git commit -m "mensaje" (crear commit para guardar los cambios)
            git checkout main       (cambiar a la rama principal)
            git merge rama          (unir la rama a main para los cambios)
            git branch -D rama      (eliminar la rama)

            --- ir a GitHub ---
            *   crear un "pull request"
            *   esperar que @TheCodingStudent lo agregue (estoy buscando como
                hacer que cualquiera lo agregue)
    
    *   termine de documentar la clase Matrix y unas que otras
        correcciones. (8:33pm)

-26/06/22:
    *   (Armando) Decidi documentar de la manera mas extensa posible esta
        libreria, vi un tutorial de "Tec with Tim" sobre "type hinting", no
        afecta el codigo pero si te permite declarar de mejor manera que se
        espera recibir, aparte de que hay una libreria llama "mypy" que sirve
        para realizar analisis de datos, asi que puede que nos venga de perlas
        en el futuro. (8:54am)
    *   MATH y TOOLS ha sido debidamente documentado con los tipos de datos.
        Tambien estoy probando hacer un script que me facilite actualizar el
        repositorio de GitHub. (9:19am)
    *   El sistema para subir automaticamente a GitHub funciona de maravilla,
        ahora tiene algunos parametros: (9:58am)
            --  version x.x.x esto permite poner una version especifica, por
                default solo incrementa el ultimo numero
            --  GitHub (f, false, False) esto hace que no se suba a GitHub,
                puede ser util ü§∑‚Äç‚ôÇÔ∏è
            --  commit "mensaje" esto cambia el commit default "version x.x.x",
                para esas ocasiones donde hay que corregir peque√±os errores
            --  PyPi (f, false, False) lo mismo que --GitHub, yo que se, a este
                punto estoy agregando cosas por si acaso üòÇ
    *   Todo funciona como debe hasta el momento de introducir el usuario y
        contrase√±a en Twine, podria hacerle algo con keyboard pero de momento
        no me molesta por que me ahorra muchos pasos. Probare algo rapido si no
        asi lo dejare.
    *   NOTA: los commit no deben tener espacios en blanco, no se por que no lo
        reconoce como debe. (10:11am)
    *   NOTA: los commit ya pueden tener espacios vacios, al parecer me falto
        ponerle comillas al argumento para que cmd supiera que es un texto.
        (10:15am)
    *   Aunque no lo consideraba necesario documente "upload.py" para que no
        solo jesucristo sepa como funciona. Ademas quite algunas cosas de los
        modulos que importaba pero no usaba, probare el codigo para subir de
        manera completa. (10:26am)
    *   Trabajando en un tipo codigo que envio Demian me di cuenta de que
        cuando imprimes diccionarios es muy molesto tenerlo en una sola linea,
        asi que intentare hacer una funcion que lo imprima indentado. (10:40pm)
        [mi padre me rega√±o por estar tan tarde]
    *   La funcion "pretty_dict" funciona perfectamente, ya tiene parametros
        opcionales y todo. Procedo a subir. (11:01pm)

-27/06/22:
    *   (Armando) Al parecer ya no es necesario utilizar List, Dict... de la 
        libreria typing, esto ya esta por default en python 3.9 en adelante,
        asi que ahora sera necesario >=3.9 para PyLejandria, en este punto no
        me molesta, si fuera necesario podemos corregirlo facilmente y ya.
        (7:38am)
    *   He terminado de documentar en base a PEP8, utilice una pagina que te
        dice los errores que tiene "https://pep8online.com". 
        A continuacion los errores que tenia: (9:22am):
            -   todos los archivos deben llevar una linea en blanco al final
            -   hay que cuidar los espacios en blanco al final de las lineas
            -   debe haber una separacion de 2 lineas entre clases y funciones
            -   el operador de union "|" debe ir separado por espacios a ambos
                lados ( a | b )
            -   las lineas no deben pasar las 79 columnas
            -   var != None es incorrecto, debe usarse is None en su lugar
    *   Otro cambio fue que ahora se necesita python >=3.9, ya que ya no se
        necesita "typing" para list, dict, etc... Vere si Demian quiere
        corregir mi gramatica, crucemos los dedos. (9:25am)
    *   Documente en base PEP8 el "upload.py". (9:03pm)
    *   Las funciones prettify y pretty_dict ahora por default imprimen el
        resultado, pero tambien devuelven el string. (9:06pm)
    *   Gracias a una ocurrencia de Demian ha surgido el archivo "ideas.txt".
        (9:12pm)

-28/06/22:
    *   (Armando) Empiezo a creer que este proyecto solo existe gracias a mi,
        pero no me importa, la idea de tener un nuevo proyecto y aprender es
        suficiente como para seguir progrmando, aparte de ser terapeutico. El
        dia de hoy hare una nueva clase para Math llamada Symbol, la idea
        principal es emular lo que hace sympy y tener variables, esto surge de
        la platica con Demian de anoche. Sera la primera vez que pruebe crear
        otra rama, esto con la intencion de no llegar a cagarla. (11:28am)
    *   Symbol de momento tiene las funciones mas basicas, hay que ver como
        arreglar lo de dividir y toca crear una clase Polynomial. (1:14pm)
    *   Parece ser que el gym ayuda a resolver problemas en general, hasta este
        momento la clase Symbol y Polynomial estan bastante avanzadas, hay aun
        muchos detalles que pulir, agregar precaciones y errores custom,
        documentar, etc. Pero va bastante bien, aunque hace un momento surgio
        la idea de una clase Fraction, le dare algunas vueltas y si sale algo
        interesenta lo documentare aqui. (7:20pm)
    *   Habia un error en las funciones de tools, la idea era que
        automaticamente imprimieran pero no puse print. (7:26pm)
    *   Me encuentro muy cansado asi que hasta aqui llegare el dia de hoy.
        Armando del futuro, tienes esto pendiente: (7:32pm)

            -   modificar la clase Symbol o hacer otra clase para almacenar
                variables del tipo x^2y^3, ya que no es monomio ni polinomio
            -   agregar excepciones para que incluso tu sepas que te fue mal
            -   falta division de polinomios
            -   queda pendiente si la clase Fraction vale la pena

-29/06/22:
    *   (Armando) El dia de hoy aproveche para mejorar la terminal, ahora por
        default sera PowerShell. (8:47am).
    *   El archivo upload.py tenia un error al darle una version, ya esta
        corregido. Ahora solo se subiran los archivos de la nueva version,
        falta ver si esto hace que los modulos se suban mas rapido, no le veo
        caso subir los archivos una y otra vez. (9:19am)
    *   La herramienta para juntar imagenes en pdf me seria muy util, asi que
        lo agregare a tools y ma√±ana o mas tarde lo documento. (5:20pm)

-01/06/22:
    *   (Armando) Ayer no aparece actividad ya que he estado trabajando en la
        rama DEV, el dia de hoy agregue 2 funciones que surgieron al hacer el
        programa que saca los pdf del rpp. (8:35am)
    *   El uploadr tenia un error de direccion, tambien tuve que agregar la
        libreria "img2pdf" a las dependencias para que todo funcione como debe.
        Ya esta todo terminado, procedo a subir la version 0.0.13. (8:52am)
    *   Se mejoro la funcion image_to_pdf, ahora recibe muchos mas argumentos.
        Tambien agregue una funcion y variable global para generar los tipos
        de archivo, esto es para las ventanas de tkinter. (9:21am)
    *   Resulto mas facil mover el archivo graph de la rama DEV a la rama MAIN,
        pero debo aprender a como fusionar ramas que han sido modificadas. El
        archivo graph.py de momento es muy basica y necesita mas trabajo,
        reiniciare la rama DEV y trabajare ahi, intentare no trabajar en 2
        ramas al mismo tiempo. (9:39am)
    *   Ahora la funcion image_to_pdf regresa el path, puede ser util para
        cuando no lo especificas pero deseas usar despues. (10:24am)

-04/06/22:
    *   (Armando) Parece que puedo pasar cada vez mas tiempo sin programar,
        supongo que la emocion del proyecto esta empezando a morir, sumado a
        que todo parece indicar que Javier y Demian no ayudaran tan
        activamente, de igual manera seguire trabajando esporadicamente en el
        proyecto. La idea de hoy es agregar una funcion que facilite crear
        modulos para PyPi, creando la estructura necesaria, algo asi como el
        GIT init. (9:15am)
    *   Parece que funciona perfectamente, procedo a actualizar PyLejandria.
        (10:04am)
    *   upload.py tenia cosas que ya no se usan, asi que las quite. (10:05am)
    *   Faltaba obtener el directorio actual para poder subir los archivos por
        default. (10:22am)
    *   Tuve que agregar varias medidas de seguridad al uploader, tambien
        actualice el README, ahora el uploader esta listo para recibir un
        folder y subirlo a PyPi. Probando el PEP8 me di cuenta de que la
        estructura correcta para el match es:
            match(...): ‚úÖ      match (...): ‚ùå
                case(...):          case (...): ...
                    ...
    
    *   Agregue un ArgumentParser a tools, esto con la idea de simplicar la
        forma de obtener argumentos, argparse tenia algunas cosas que no me
        gustaban, ArgumentParser se accede como un diccionario y se configura
        igual que argparse, pero este si convierte a los tipos dados y tiene
        multiples precauciones, tambien estoy pensando en utilizar regex para
        validar strings, podria ser util.
    *   PEP8 indica que los modulos se deben importar en orden alfabetico,
        ya corregi eso.
    *   Multiples cosas simplificadas en todos los modulos.
    *   Tambien estoy pensando en una interfaz grafica para la herramienta
        uploader.
    *   Procedo a guardar y todas esas cosas. (6:41pm)

    *   Realice una interfaz grafica para el uploader, parece que funciona de
        momento, tambien implemente un sistema con el nuevo ArgumentParser de
        tools, procedere a probar. Tambien vi 1:30h de Harry Potter, asi que no
        he estado todo el tiempo programando. (10:03pm)
    *   Parece que no estaba todo perfecto, al final tambien converti el
        uploader en una clase para que en dado caso pueda ser importado, tal
        vez funcione mejor como modulo, como sea esta listo para poder
        utilizarce como modulo. (11:20pm)
    *   La gente que no programa no entendera por que me quedo hasta las
        11:40pm viendo texto y escribiendo, pero yo estoy orgulloso de lo que
        hice el dia de hoy. Tuve que arreglar algunos problemas con seleccionar
        alguna carpeta que no tenga un paquete, ya esta arreglado y varias mas
        optimizaciones. (11:41pm)
    *   Es todo por hoy. (11:48pm)

-06/07/22:
    *   (Armando) Hoy es el aniversario numero 20 de mis padres, asi que
        celebraremos creando una herramienta que corrija mi codigo, la idea es
        aparte de tener un corrector PEP8 automatico, analizar que componentes
        serian utiles para gui.py, si surge algo interesante entonces creare el
        modulo. (8:18am)
    *   A√±adida la clase Window. (8:35am)
    *   Ahora hay un TextArea que permite mostrar el numero de linea. (9:18am)
    *   Primera version de gui documentada y corregida. (9:24am)
    *   TextArea esta siendo mejorada con mas funciones. (9:57am)
    *   Al final el corrector PEP8 tiene funciones simples de momento, despues
        puedo agregarle mas reglas gramaticales, gui termino de ser documentado
        y de momento no se me ocurre mas que agregarle, supongo que cuando
        tenga otro proyecto podre ver si necesito mas cosas. (12:27pm)
    *   Corregido upload.py. (12:35pm)
    *   Corregido tools.py. (12:36pm)
    *   Corregido module.py.
    *   Corregido math.py. (12:44pm)
    *   Procedo a subir. (12:45pm)
    *   Automagicamente queriendo evitar un error usando un try parece haber
        solucionado el problema de copy paste de TextArea. (5:19pm)
    *   Le a√±adi al uploader la posibilidad de eliminar o no los archivos de la
        carpeta Dist, no le veo caso en tener cada version mas y mas archivos,
        en caso de ser necesarios podemos verlos en los commits y ya. (6:10pm)

-07/07/22:
    *   (Armando) Definitivamente este archivo tambien seguira la regla de
        maximo 80 caracteres, para poder actualizar al mismo tiempo que
        escribo codigo.
    *   Hoy hice un "cheat sheet" para Markdown, quiero mejorar el README de
        PyLejandria, tambien baje una extension para ver en tiempo real como
        luciria.
    *   Decidi actualizar todo el historial para que tenga maximo 80
        caracteres, estoy pensando la manera de que un programa de manera
        automatica lo haga, el problema son los tabs, aun no se como contarlos
        con regex, supongo que en el peor de los casos tendre que hacer un 
        programa mas complejo en python.
    *   Me voy al gimnasio. (2:44pm) [me duele la espalda y me siento cansado]
    *   Mi padre se quedo hablando con interceramic, asi que le agregue al
        uploader el hecho de que al no subir a PyPi, el combobox de borrar
        versiones anteriores se desactiva. (2:50pm)
    *   Hora de embellecer el proyecto. (5:45pm)
    *   Graph.py de momento no lo tengo claro, hasta que me de una inspiracion
        lo devolvere a la vida, en el transcurso tal vez haga herramientas que
        me ayuden en su desarrollo. (5:48pm)
    *   Actualizadas las dependencias. (5:52pm)
    *   Me estoy quedando dormido, ya quite pygame de los requerimentos.
        (6:16pm)
    *   Module.py actualizado con funciones de PyLejandria. (6:32pm)
    *   Ahora los modulos tendran una funcion example, con la finalidad de que
        sea sencillo empezar a usarlo, puede ser tambien una interfaz grafica
        con todos los atributos y ayudas, aun no lo se. (6:47pm)
    *   Voy a probar que pasa si pongo cosas en el __init__. (6:53pm)
    *   Termine el README, lo subire para ver que tal y hare posteriores
        correcciones. (7:14pm)
    *   Parece ser que el uploader tiene un error cuando cancelas la subida a
        PyPi, lo corregire y subire. (7:17pm)
    *   El README se ve mucho mejor que el primero, pero aun le faltan cosas,
        ademas tengo que descubrir como hacer que tambien aparezca en PyPi.
        (7:21pm)
    *   En teoria el README se mostrara en PyPi. (7:30pm)